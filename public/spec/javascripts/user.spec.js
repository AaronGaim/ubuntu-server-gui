// Generated by CoffeeScript 1.3.3

require(['model/User', 'model/Session', 'app'], function(User, Session, App) {
  describe('User - default attributes', function() {
    beforeEach(function() {
      this.user = new User();
    });
    it('should set "email" attribute to an empty string upon User creation', function() {
      expect(this.user.get('email')).toBe('');
    });
    it('should set "password" attribute to an empty string upon User creation', function() {
      expect(this.user.get('password')).toBe('');
    });
  });
  describe('User - setting attributes', function() {
    beforeEach(function() {
      this.user = new User({
        email: 'david@ubuntuservergui.com',
        password: 'samplepass'
      });
    });
    it('should set "email" attribute upon creation', function() {
      expect(this.user.get('email')).toBe('david@ubuntuservergui.com');
    });
    it('should set "password" attribute upon creation', function() {
      expect(this.user.get('password')).toBe('samplepass');
    });
  });
  describe('User - login functionality', function() {
    beforeEach(function() {
      App.routers.main = {
        navigate: jasmine.createSpy()
      };
      spyOn(App.vent, 'trigger');
      spyOn(App.vent, 'bind');
      this.server = sinon.fakeServer.create();
    });
    afterEach(function() {
      return this.server.restore();
    });
    it('should make a login request to the server', function() {
      var user;
      user = new User({
        email: 'david@ubuntuservergui.com',
        password: 'samplepass'
      });
      user.login();
      this.server.respond();
      expect(this.server.requests[0].method).toEqual('POST');
      expect(this.server.requests[0].url).toEqual('https://cloud.ubuntuservergui.dev/main/login');
      expect(this.server.requests[0].requestBody).toEqual('email=david%40ubuntuservergui.com&password=samplepass');
    });
    it('should attempt to set "active" attribute of user.session to true upon successful login', function() {
      var responseBody, user;
      responseBody = '{"success": "true"}';
      this.server.respondWith("POST", "https://cloud.ubuntuservergui.dev/main/login", [
        200, {
          "Content-Type": "application/json"
        }, responseBody
      ]);
      spyOn(User.prototype, 'loginSuccess').andCallThrough();
      spyOn(Session.prototype, 'set');
      user = new User({
        email: 'david@ubuntuservergui.com',
        password: 'samplepass'
      });
      user.login();
      this.server.respond();
      expect(user.loginSuccess).toHaveBeenCalled();
      expect(user.session.set).toHaveBeenCalled();
      expect(user.session.set.argsForCall[1][0]).toMatch('active');
      expect(user.session.set.argsForCall[1][1]).toMatch(true);
    });
    it('should handle an invalid authentication request', function() {
      var responseBody, user;
      responseBody = '{"success": "false", "msg": "Invalid email or password."}';
      this.server.respondWith("POST", "https://cloud.ubuntuservergui.dev/main/login", [
        406, {
          "Content-Type": "application/json"
        }, responseBody
      ]);
      spyOn(User.prototype, 'loginError').andCallThrough();
      spyOn(Session.prototype, 'set');
      user = new User({
        email: 'david@ubuntuservergui.com',
        password: 'samplepass'
      });
      user.login();
      this.server.respond();
      expect(user.loginError).toHaveBeenCalled();
      expect(user.session.set).toHaveBeenCalled();
      expect(user.session.set.argsForCall[1][0]).toMatch('active');
      expect(user.session.set.argsForCall[1][1]).toMatch(false);
      expect(App.vent.trigger).toHaveBeenCalledWith('auth:invalidLoginRequest', 'Invalid email or password.');
    });
  });
  return {
    name: "userSpec"
  };
});
