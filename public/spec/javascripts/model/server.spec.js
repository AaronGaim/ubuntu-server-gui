// Generated by CoffeeScript 1.3.3

require(['model/Server', 'app'], function(Server, App) {
  describe('Server - default instance settings', function() {
    beforeEach(function() {
      this.server = new Server();
    });
    it('should set "local" object key to true upon Server creation', function() {
      expect(this.server.local).toBeTruthy();
    });
    it('should set "url" object key to "Servers" upon Server creation', function() {
      expect(this.server.url).toBe('Servers');
    });
  });
  describe('Server - model attributes', function() {
    beforeEach(function() {
      this.server = new Server();
    });
    it('should set "name" model attribute', function() {
      this.server.set('name', 'New Server');
      expect(this.server.get('name')).toBe('New Server');
    });
    it('should set "ipv4" model attribute', function() {
      this.server.set('ipv4', '10.0.0.1');
      expect(this.server.get('ipv4')).toBe('10.0.0.1');
    });
  });
  describe('Server - model localStorage operations', function() {
    window.localStorage.clear();
    beforeEach(function() {
      this.server = new Server();
    });
    afterEach(function() {
      window.localStorage.clear();
    });
    it('should save model to localStorage', function() {
      runs(function() {
        this.server.set('name', 'Sample Server');
        this.server.set('ipv4', '192.168.0.1');
        this.server.save();
      });
      waits(500);
      runs(function() {
        var localStorageServers;
        localStorageServers = window.localStorage["Servers"].split(',');
        expect(localStorageServers.length).toEqual(1);
      });
    });
    it('model id should match item id in localStorage', function() {
      runs(function() {
        this.server.set('name', 'Super Sample Server');
        this.server.set('ipv4', '192.168.10.1');
        this.server.save();
      });
      waits(500);
      runs(function() {
        expect(window.localStorage["Servers"]).toBe(this.server.id);
      });
    });
    it('should delete model from localStorage when calling destroy', function() {
      runs(function() {
        this.server.set('name', 'Super Sample Server');
        this.server.set('ipv4', '192.168.10.1');
        this.server.save();
      });
      waits(300);
      runs(function() {
        expect(window.localStorage["Servers"]).toBe(this.server.id);
        this.server.destroy();
      });
      waits(300);
      runs(function() {
        expect(window.localStorage["Servers"].length).toEqual(0);
      });
    });
    return it('should persist model attribute edits back to localStorage when calling save after edits', function() {
      runs(function() {
        this.server.set('name', 'Super Sample Server');
        this.server.set('ipv4', '192.168.10.1');
        this.server.save();
      });
      waits(300);
      runs(function() {
        expect(window.localStorage["Servers"]).toBe(this.server.id);
        this.server.set('name', 'Changed Sample Server');
        this.server.set('ipv4', '111.108.0.1');
        this.server.save();
      });
      waits(300);
      runs(function() {
        var serverData, serverKey;
        serverKey = "Servers" + this.server.id;
        serverData = JSON.parse(window.localStorage[serverKey]);
        expect(serverData.name).toBe('Changed Sample Server');
        expect(serverData.ipv4).toBe('111.108.0.1');
      });
    });
  });
});
