// Generated by CoffeeScript 1.3.3

require(['model/User', 'view/loginsignup/LoginSignup'], function(User, LoginSignup) {
  describe('LoginSignup - new instance', function() {
    it('should set template correctly upon LoginSignup creation', function() {
      var loginSignup, user;
      user = new User();
      loginSignup = new LoginSignup({
        model: user
      });
      expect(loginSignup.template).toBeDefined();
      this.after(function() {
        loginSignup.close();
      });
    });
  });
  describe('LoginSignup - login form field model bindings', function() {
    beforeEach(function() {
      this.user = new User();
      this.loginSignup = new LoginSignup({
        model: this.user
      });
      this.loginSignup.render();
    });
    afterEach(function() {
      delete this.user;
      this.loginSignup.close();
    });
    it('should update user model when field values change', function() {
      this.loginSignup.$('input[name=email]').val('russell.peters@aol.com');
      this.loginSignup.$('input[name=email]').trigger('change');
      this.loginSignup.$('input[name=password]').val('sample-pass');
      this.loginSignup.$('input[name=password]').trigger('change');
      expect(this.user.get('email')).toEqual('russell.peters@aol.com');
      expect(this.user.get('password')).toEqual('sample-pass');
    });
  });
  describe('LoginSignup - login button click event handlers', function() {
    beforeEach(function() {
      this.app = {
        vent: {
          trigger: jasmine.createSpy(),
          bind: jasmine.createSpy()
        },
        routers: {
          main: {
            navigate: jasmine.createSpy()
          }
        }
      };
      this.user = new User({}, {
        app: this.app
      });
      spyOn(this.user, 'login');
    });
    it('should call displayError and not dislableForm or user.login if email or password fields are empty', function() {
      var ls;
      spyOn(LoginSignup.prototype, 'onLoginClick').andCallThrough();
      spyOn(LoginSignup.prototype, 'displayError');
      spyOn(LoginSignup.prototype, 'disableForm');
      ls = new LoginSignup({
        model: this.user
      });
      ls.render();
      ls.$('input[name=email]').val('');
      ls.$('input[name=email]').trigger('change');
      ls.$('input[name=password]').val('');
      ls.$('input[name=password]').trigger('change');
      ls.$('#login_btn').click();
      expect(ls.onLoginClick).toHaveBeenCalled();
      expect(ls.displayError).toHaveBeenCalled();
      expect(ls.disableForm).not.toHaveBeenCalled();
      expect(ls.model.login).not.toHaveBeenCalled();
      this.after(function() {
        ls.close();
      });
    });
    it('should call onLoginClick when login button is clicked', function() {
      var loginSignup;
      spyOn(LoginSignup.prototype, 'onLoginClick').andCallThrough();
      spyOn(LoginSignup.prototype, 'clearError');
      loginSignup = new LoginSignup({
        model: this.user
      });
      loginSignup.render();
      loginSignup.$('#login_btn').click();
      expect(loginSignup.onLoginClick).toHaveBeenCalled();
      expect(loginSignup.clearError).toHaveBeenCalled();
      this.after(function() {
        loginSignup.close();
      });
    });
    it('should disableForm and call user.login when login button is clicked with valid data', function() {
      var loginSignup;
      spyOn(LoginSignup.prototype, 'clearError');
      spyOn(LoginSignup.prototype, 'disableForm');
      loginSignup = new LoginSignup({
        model: this.user
      });
      loginSignup.render();
      loginSignup.$('input[name=email]').val('sample@mail.com');
      loginSignup.$('input[name=email]').trigger('change');
      loginSignup.$('input[name=password]').val('pass');
      loginSignup.$('input[name=password]').trigger('change');
      loginSignup.$('#login_btn').click();
      expect(loginSignup.clearError).toHaveBeenCalled();
      expect(loginSignup.disableForm).toHaveBeenCalled();
      expect(loginSignup.model.login).toHaveBeenCalled();
      this.after(function() {
        loginSignup.close();
      });
    });
  });
  describe('LoginSignup - local form validation', function() {
    beforeEach(function() {
      this.app = {
        vent: {
          trigger: jasmine.createSpy(),
          bind: jasmine.createSpy()
        },
        routers: {
          main: {
            navigate: jasmine.createSpy()
          }
        }
      };
      this.user = new User({}, {
        app: this.app
      });
      spyOn(LoginSignup.prototype, 'displayError').andCallThrough();
      this.loginSignup = new LoginSignup({
        model: this.user
      });
      this.loginSignup.render();
    });
    afterEach(function() {
      this.loginSignup.close();
    });
    it('should show an error message if email field is invalid', function() {
      this.loginSignup.$('#login_btn').click();
      expect(this.loginSignup.displayError).toHaveBeenCalled();
      expect(this.loginSignup.$('#loginErrorMsg').css('visibility') === 'visible').toBeTruthy();
    });
    it('should show an error message if password field is invalid', function() {
      this.loginSignup.$('#login_btn').click();
      expect(this.loginSignup.displayError).toHaveBeenCalled();
      expect(this.loginSignup.$('#loginErrorMsg').css('visibility') === 'visible').toBeTruthy();
    });
    it('should show an error message if both email and password fields are invalid', function() {
      this.loginSignup.$('#login_btn').click();
      expect(this.loginSignup.displayError).toHaveBeenCalled();
      expect(this.loginSignup.$('#loginErrorMsg').css('visibility') === 'visible').toBeTruthy();
    });
  });
  return {
    name: "loginsignupSpec"
  };
});
