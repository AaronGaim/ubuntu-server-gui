// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone_marionette', 'backbone_modelbinder', 'text!view/loginsignup/tpl/loginsignup.html'], function($, _, BackboneMarionette, BackboneModelBinder, loginSignupLayoutTpl) {
  /**
   * @class LoginSignup
   * Displays login/signup form.
   * @extends BackboneMarionette.ItemView
  */

  var LoginSignup;
  return LoginSignup = (function(_super) {

    __extends(LoginSignup, _super);

    /**
     * @constructor
     * Creates a new LoginSignup instance.
     * @param {Object} [options] config options for BackboneMarionette.ItemView.
     * @return {Object} LoginSignup instance
    */


    function LoginSignup(options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      this.template = _.template(loginSignupLayoutTpl);
      this.tagName = 'div';
      this.id = 'loginsignup_view';
      this.model = options.model;
      this.modelBinder = new BackboneModelBinder();
      this.events = {
        'click #login_btn': 'onLoginClick',
        'keyup input': 'onInputKeyup'
      };
      if ((this.model.app != null)) {
        this.app = this.model.app;
        this.app.vent.bind('auth:invalidLoginRequest', function(msg) {
          _this.displayError(msg);
          _this.enableForm();
        });
      }
      return LoginSignup.__super__.constructor.call(this, options);
    }

    LoginSignup.prototype.close = function() {
      this.modelBinder.unbind();
      LoginSignup.__super__.close.apply(this, arguments);
    };

    LoginSignup.prototype.disableForm = function() {
      this.$(':input').attr('disabled', true);
    };

    LoginSignup.prototype.displayError = function(msg) {
      var emailRegex;
      emailRegex = /^[a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,6}$/;
      if ((msg != null)) {
        this.$('#loginErrorMsg').text(msg).css('visibility', 'visible');
      } else if (this.model.get('email').length === 0 && this.model.get('password').length === 0) {
        this.$('#loginErrorMsg').text('Email and Password are required.').css('visibility', 'visible');
      } else if (this.model.get('email').length === 0 || !emailRegex.test(this.model.get('email'))) {
        this.$('#loginErrorMsg').text('Valid email is required.').css('visibility', 'visible');
      } else if (this.model.get('password').length === 0) {
        this.$('#loginErrorMsg').text('Password is required.').css('visibility', 'visible');
      }
    };

    LoginSignup.prototype.clearError = function() {
      this.$('#loginErrorMsg').text('').css('visibility', 'hidden');
    };

    LoginSignup.prototype.enableForm = function() {
      return this.$(':input').attr('disabled', false);
    };

    LoginSignup.prototype.onInputKeyup = function(eventObj) {
      if (eventObj.keyCode === 13) {
        $(eventObj.target).closest('form').parent().find('button').click();
      }
    };

    LoginSignup.prototype.onRender = function() {
      this.modelBinder.bind(this.model, this.el);
      return this;
    };

    LoginSignup.prototype.onLoginClick = function(eventObj) {
      eventObj.stopPropagation();
      eventObj.preventDefault();
      eventObj.returnValue = false;
      this.clearError();
      if (this.model.get('email').length <= 0 || this.model.get('password') <= 0) {
        this.displayError();
      } else {
        this.disableForm();
        this.model.login();
      }
    };

    return LoginSignup;

  })(BackboneMarionette.ItemView);
});
