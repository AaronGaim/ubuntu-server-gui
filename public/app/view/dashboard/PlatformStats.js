// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'backbone_marionette', 'backbone_modelbinder', 'text!view/dashboard/tpl/platform-stats.html'], function($, _, Backbone, BackboneMarionette, BackboneModelBinder, platformStatsTpl) {
  /**
   * @class PlatformStats
   * Displays information about the server OS like version and kernel.
   * @extends BackboneMarionette.ItemView
  */

  var PlatformStats;
  return PlatformStats = (function(_super) {

    __extends(PlatformStats, _super);

    /**
     * @constructor
     * Creates a new PlatformStats instance.
     * @param {Object} [options] config options for BackboneMarionette.ItemView.         
     * @return {Object} PlatformStats instance.
    */


    function PlatformStats(options) {
      this.onRender = __bind(this.onRender, this);
      this.template = _.template(platformStatsTpl);
      this.tagName = 'div';
      this.className = 'software';
      this._modelBinder = new BackboneModelBinder();
      return PlatformStats.__super__.constructor.call(this, options);
    }

    /**
     * @method @private
     * Sets up automatic model data bindings via ModelBinder.
     * @return {Object} PlatformStats instance.
    */


    PlatformStats.prototype.onRender = function() {
      this._modelBinder.bind(this.model, this.el);
      return this;
    };

    return PlatformStats;

  })(BackboneMarionette.ItemView);
});
