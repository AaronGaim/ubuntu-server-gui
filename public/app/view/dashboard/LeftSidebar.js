// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'app', 'collection/ServerList', 'view/UsgCollectionView', 'view/dashboard/LeftSidebarItem', 'view/modal/AddEditServer', 'view/modal/RemoveServer', 'contextmenu'], function($, _, App, ServerList, UsgCollectionView, LeftsidebarItem, AddEditServerModal, RemoveServerModal, ContextMenu) {
  /**
   * @class LeftSidebar
   * Displays list of servers associated with the 
   * user's account in the left sidebar of the Dashboard. 
   * @extends UsgCollectionView
  */

  var LeftSidebar;
  return LeftSidebar = (function(_super) {

    __extends(LeftSidebar, _super);

    /**
     * @constructor
     * Creates a new LeftSidebar instance.
     * @param {Object} [options] config options for UsgCollectionView.         
     * @return {Object} LeftSidebar instance.
    */


    function LeftSidebar(options) {
      if (options == null) {
        options = {};
      }
      this.onRemoveServerClick = __bind(this.onRemoveServerClick, this);

      this.onEditServerClick = __bind(this.onEditServerClick, this);

      this.App = App;
      this.itemView = LeftsidebarItem;
      this.itemViewOptions = {};
      this.tagName = 'ul';
      this.id = 'left_sidebar_serverlist';
      this.collection = new ServerList();
      this.parentRegion = options.parentRegion;
      this.events = {
        'click li': 'onServerClick',
        'contextmenu li': 'onServerRightClick'
      };
      this.contextMenu = new ContextMenu([
        {
          label: "Edit Server",
          onclick: this.onEditServerClick
        }, {
          label: "Remove Server",
          onclick: this.onRemoveServerClick
        }
      ]);
      LeftSidebar.__super__.constructor.apply(this, arguments);
      this.collection.fetch();
      return;
    }

    LeftSidebar.prototype.onServerClick = function(eventObj) {};

    LeftSidebar.prototype.onServerRightClick = function(eventObj) {
      eventObj.preventDefault();
      eventObj.stopPropagation();
      this.contextMenu.sourceEvent = eventObj;
      ContextMenu.show(this.contextMenu, eventObj.clientX, eventObj.clientY);
    };

    LeftSidebar.prototype.onEditServerClick = function(eventObj) {
      var server;
      server = this.collection.get(this.contextMenu.sourceEvent.currentTarget.id.slice(10));
      this.App.modal.show(new AddEditServerModal({
        model: server,
        operationLabel: 'Edit'
      }));
    };

    LeftSidebar.prototype.onRemoveServerClick = function(eventObj) {
      var server;
      server = this.collection.get(this.contextMenu.sourceEvent.currentTarget.id.slice(10));
      this.App.modal.show(new RemoveServerModal({
        model: server
      }));
    };

    return LeftSidebar;

  })(UsgCollectionView);
});
