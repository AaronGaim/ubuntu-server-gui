// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone_marionette', 'model/PlatformInfo', 'collection/NetServices', 'view/dashboard/LeftSidebar', 'view/dashboard/UtilizationStats', 'view/dashboard/PlatformStats', 'view/dashboard/RunningServices', 'text!view/dashboard/tpl/layout.html'], function($, _, BackboneMarionette, PlatformInfoModel, NetServices, LeftSidebar, UtilizationStats, PlatformStats, RunningServices, dashboardLayoutTpl) {
  /**
   * @class Dashboard
   * Displays dashboard overview for the currently selected
   * server.
   * @extends BackboneMarionette.Layout
  */

  var Dashboard;
  return Dashboard = (function(_super) {

    __extends(Dashboard, _super);

    /**
     * @constructor
     * Creates a new Dashboard instance.
     * @param {Object} [options] config options for BackboneMarionette.Layout.         
     * @return {Object} Dashboard instance.
    */


    function Dashboard(options) {
      var _this = this;
      if (options == null) {
        options = {};
      }
      this.template = _.template(dashboardLayoutTpl);
      this.tagName = 'div';
      this.id = 'dashboard_layout';
      this.regions = {
        sidebarLeftRegion: '#sidebar_left',
        performanceRegion: '#dash_performance',
        servicesRegion: '#dash_services',
        platformRegion: '#dash_platform'
      };
      Dashboard.__super__.constructor.call(this, options);
      this.platformInfo = new PlatformInfoModel();
      this.netServices = new NetServices();
      this.netServices.on('reset', function() {
        _this.servicesRegion.show(new RunningServices({
          collection: _this.netServices
        }));
      }, this);
      return;
    }

    /**
     * @method @private
     * Shows sub views that make up the Dashboard upon render.
     * @return {Object} Dashboard instance.
    */


    Dashboard.prototype.onRender = function() {
      this.netServices.fetch();
      this.performanceRegion.show(new UtilizationStats());
      this.platformRegion.show(new PlatformStats({
        model: this.platformInfo
      }));
    };

    Dashboard.prototype.onShow = function() {
      this.sidebarLeftRegion.show(new LeftSidebar());
    };

    return Dashboard;

  })(BackboneMarionette.Layout);
});
