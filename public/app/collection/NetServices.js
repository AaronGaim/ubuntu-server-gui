// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'socket_io', 'app'], function($, _, Backbone, io, App) {
  /**
   * @class NetServices
   * Running network services.
   * @extends Backbone.Collection
  */

  var NetServices;
  return NetServices = (function(_super) {

    __extends(NetServices, _super);

    function NetServices(options) {
      if (options == null) {
        options = {};
      }
      this.parse = __bind(this.parse, this);

      this.remote = true;
      this.url = 'http://10.0.1.5:3030/dash';
      NetServices.__super__.constructor.apply(this, arguments);
      this.ws = io.connect(this.url, App.ioConfig);
      this.ws.on('net-services', this.parse);
      return;
    }

    NetServices.prototype.fetch = function(options) {
      if (options == null) {
        options = {};
      }
      this.ws.emit('net-services');
    };

    /**
     * @method @private
     * Formats network service names.
     * @param {String} str network service name from the server.
     * @return {String} re-formmated service name
    */


    NetServices.prototype.formatService = function(str) {
      str = str.replace(/node/, 'nodeJS');
      str = str.replace(/(isc dhcp client|dhclient|dhclient3)\b/, 'DHCP Client');
      str = str.replace(/sshd/i, 'ssh');
      str = str.replace(/(db|sql|ssh|dhcp)\b/, function(txt) {
        return txt.toUpperCase();
      });
      return str;
    };

    /**
     * @method @private
     * Formats data returned from the server after fetch is called.
     * @param {Object} response JSON data from the server
     * @param {Object} [jqXHR] jQuery jqXHR
     * @return {Object} re-formmated JSON data
    */


    NetServices.prototype.parse = function(response) {
      var results, vals,
        _this = this;
      results = [];
      vals = [];
      _.each(response.netServices, function(item, index, list) {
        item.name = _this.formatService(item.name);
        if (vals.indexOf(item.name) === -1) {
          results.push(item);
        }
        return vals.push(item.name);
      });
      return this.reset(results);
    };

    return NetServices;

  })(Backbone.Collection);
});
