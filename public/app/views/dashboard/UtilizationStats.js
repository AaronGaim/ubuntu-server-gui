// Generated by CoffeeScript 1.3.3
var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'marionette', 'backbone_modelbinder', 'App', 'models/ServerOverview', 'gauge', 'text!views/dashboard/templates/utilization-stats.html'], function($, _, Backbone, BackboneMarionette, BackboneModelBinder, App, ServerOverview, Gauge, utilizationStatsTpl) {
  /**
   * @class UtilizationStatus
   * Displays guages for cpu and memory utilization.
   * @extends BackboneMarionette.ItemView
  */

  var UtilizationStats;
  return UtilizationStats = (function(_super) {

    __extends(UtilizationStats, _super);

    /**
     * @constructor
     * Creates a new UtilizationStats instance.
     * @return {Object} UtilizationStats instance.
    */


    function UtilizationStats(options) {
      var _ref;
      if (options == null) {
        options = {};
      }
      this.cpuGaugeConverter = __bind(this.cpuGaugeConverter, this);

      this.App = App;
      this.template = _.template(utilizationStatsTpl);
      this.tagName = 'div';
      this.className = 'performance';
      this.model = (_ref = options.model) != null ? _ref : new ServerOverview();
      this._modelBinder = new BackboneModelBinder();
      this.modelBindings = {
        cpu: {
          selector: '[name=cpu]',
          converter: this.cpuGaugeConverter
        },
        memory: {
          selector: '[name=memory]'
        }
      };
      UtilizationStats.__super__.constructor.apply(this, arguments);
      return;
    }

    UtilizationStats.prototype.cpuGaugeConverter = function(direction, value) {
      return this.App.formatters.zeroPad(value, 1);
    };

    /**
     * @method @private
     * Sets up automatic model data bindings via ModelBinder.
     * @return {Object} UtilizationStats instance.
    */


    UtilizationStats.prototype.onRender = function() {
      var cpuGaugeTarget, memoryGaugeTarget;
      this._modelBinder.bind(this.model, this.el, this.modelBindings);
      cpuGaugeTarget = this.$('#dashboard_cpu_donut')[0];
      this.cpuGauge = new Donut(cpuGaugeTarget);
      this.cpuGauge.setOptions({
        lines: 12,
        angle: 0.50,
        lineWidth: 0.10,
        colorStart: '#A6B2FF',
        colorStop: '#929DE0',
        strokeColor: '#e0e0e0',
        generateGradient: true
      });
      this.cpuGauge.maxValue = 100;
      this.cpuGauge.set(this.model.get('cpu'));
      this.model.on("change:cpu", function(model, val) {
        return this.cpuGauge.set(val);
      }, this);
      memoryGaugeTarget = this.$('#dashboard_memory_donut')[0];
      this.memoryGauge = new Donut(memoryGaugeTarget);
      this.memoryGauge.setOptions({
        lines: 12,
        angle: 0.35,
        lineWidth: 0.10,
        colorStart: '#B7A6FF',
        colorStop: '#9C8DD9',
        shadowColor: '#d5d5d5',
        strokeColor: '#e0e0e0',
        generateGradient: true
      });
      this.memoryGauge.maxValue = 100;
      this.memoryGauge.set(this.model.get('memory'));
      this.model.on("change:memory", function(model, val) {
        return this.memoryGauge.set(val);
      }, this);
    };

    return UtilizationStats;

  })(BackboneMarionette.ItemView);
});
