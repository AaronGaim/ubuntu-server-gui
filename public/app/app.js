// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['underscore', 'backbone_marionette'], function(_, BackboneMarionette) {
  var App;
  App = (function(_super) {

    __extends(App, _super);

    /**
     * Sets up main application regions for toolbar
     * and viewport.
     *
     * Bound to initialize:before to make sure
     * the regions are always avaialable before
     * anything else runs.
     *
    */


    function App() {
      App.__super__.constructor.apply(this, arguments);
      this.addRegions({
        mainToolbar: "#main_toolbar_container",
        mainViewport: "#viewport",
        mainFooterbar: '#main_footerbar_container'
      });
      /**
       * Overrides for BackboneMarionette templating loading
       * and rendering. Optimizing Marionette for using underscore
       * templates along with Require.js.
       *
       * https://github.com/derickbailey/backbone.marionette/wiki/Using-marionette-with-requirejs
       *
      */

      this.bind('initialize:before', function(options) {
        BackboneMarionette.TemplateCache.prototype.loadTemplate = function(templateId) {
          var err, msg, template;
          template = templateId;
          if (!template || template.length === 0) {
            msg = "Could not find template: '" + templateId + "'";
            err = new Error(msg);
            err.name = "NoTemplateError";
            throw err;
          }
          return template;
        };
        BackboneMarionette.Renderer.render = function(template, data) {
          if (data == null) {
            data = {};
          }
          return template(data);
        };
      });
      /**
       * Sets up User and Session model objects
       * and attaches them to the application instance.
       * 
       * Creates a MainController instance and corresponding
       * Backbone Router object.
       *
      */

      this.addInitializer(function(options) {
        this.routers = {};
      });
      /**
       * Overrides Backbone.wrapError to trigger an Application
       * server:error event whenenver an ajax call returns a
       * 401 status code.
       *
       * Allows us to centeralize the way the app responds to
       * session timeouts and un-authenticated user condition.
       *
      */

      this.addInitializer(function(options) {
        var _this = this;
        this.onServerError = function(originalModel, jqXHR, options) {
          if (jqXHR.status === 401) {
            _this.user.session.set('active', false);
          }
        };
        this.vent.bind("server:error", this.onServerError);
        Backbone.wrapError = function(onError, originalModel, options) {
          return function(model, resp) {
            if (model === originalModel) {
              resp = resp;
            } else {
              resp = model;
            }
            if (onError) {
              onError(originalModel, resp, options);
            } else {
              originalModel.trigger('error', originalModel, resp, options);
              _this.vent.trigger('server:error', originalModel, resp, options);
            }
          };
        };
      });
      /**
       * Sets up some application wide data formatting
       * utilities.
       * 
       * TODO: put these in their own class/module.
      */

      this.addInitializer(function(options) {
        this.formatters = {};
        this.formatters.formatBytes = function(size) {
          if (size < 1024) {
            return size + "kb";
          } else if (size < 1048576) {
            return (Math.round(((size * 10) / 1024) / 10)) + "KB";
          } else {
            return (Math.round(((size * 10) / 1048576) / 10)) + "MB";
          }
        };
        this.formatters.toTitleCase = function(str) {
          return str.replace(/\w\S*/g, function(txt) {
            return txt.charAt(0).toUpperCase() + txt.substr(1);
          });
        };
        this.formatters.zeroPad = function(num, numZeros) {
          var n, zeroString, zeros;
          n = Math.abs(num);
          zeros = Math.max(0, numZeros - Math.floor(n).toString().length);
          zeroString = Math.pow(10, zeros).toString().substr(1);
          if (num < 0) {
            zeroString = '-' + zeroString;
          }
          return zeroString + n;
        };
      });
    }

    return App;

  })(BackboneMarionette.Application);
  return new App();
});
