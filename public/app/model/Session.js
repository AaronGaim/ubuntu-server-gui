// Generated by CoffeeScript 1.3.3
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(['jquery', 'underscore', 'backbone', 'app'], function($, _, Backbone, App) {
  /**
   * @class Session
   * Client-side representation of current users's session state.
   * @extends Backbone.Model
  */

  var Session;
  return Session = (function(_super) {

    __extends(Session, _super);

    /**
     * @constructor
     * Creates a new Session model.
     * @param {Object} [attributes] attributes for Backbone.Model
     * @param {Object} [options] config options for Backbone.Model
    */


    function Session(attributes, options) {
      if (attributes == null) {
        attributes = {};
      }
      if (options == null) {
        options = {};
      }
      this.App = App;
      this.remote = true;
      this.url = 'http://whatever.com';
      this.defaults = {
        'active': void 0,
        'attemptedRoute': ''
      };
      this.on('change:active', this.onStatusChange, this);
      Session.__super__.constructor.apply(this, arguments);
      return;
    }

    /**
     * @method @private
     * Responds to 'active' attribute changes, if 'active'
     * is set to false it saves the attemptedRoute and
     * navigates the user to the login page.
     *
     * @param {Object} Session model object
     * @param {String} active new value set for active attribute
    */


    Session.prototype.onStatusChange = function(session, active) {
      if (active === false) {
        if (Backbone.history.fragment !== 'auth/login') {
          this.set('attemptedRoute', Backbone.history.fragment);
        }
        this.App.routers.main.navigate('auth/login', {
          trigger: true,
          replace: true
        });
      } else if (active === true) {
        this.App.routers.main.navigate(this.get('attemptedRoute'), {
          trigger: true,
          replace: true
        });
      }
    };

    /**
     * @method @private
     * Formats data returned from the server after fetch is called.
     * @param {Object} response JSON data from the server
     * @param {Object} [jqXHR] jQuery jqXHR
     * @return {Object} re-formmated JSON data
    */


    Session.prototype.parse = function(response, jqXHR) {
      var status;
      if (response.success === true) {
        status = true;
      } else {
        status = false;
      }
      return {
        status: status
      };
    };

    return Session;

  })(Backbone.Model);
});
